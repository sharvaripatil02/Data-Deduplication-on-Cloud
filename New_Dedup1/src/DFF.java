
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DFF.java
 *
 * Created on Feb 6, 2011, 9:24:35 AM
 */

//package systemcop;

import java.awt.Desktop;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.Iterator;
import java.util.Stack;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;
import javax.swing.UIManager.*;

/**
 *
 * @author RCP
 */
public class DFF extends javax.swing.JFrame implements Runnable {
    JFileChooser FC1;
    Vector filesName = new Vector();
    Vector filesPath = new Vector();
    Vector filesSize = new Vector();
    Vector filesHash = new Vector();
    Vector coldata = new Vector();
    Vector rowdata;
    Thread t;
    int totalFiles=-1;

    /** Creates new form DFF */
    public DFF() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        BG1 = new javax.swing.ButtonGroup();
        BG2 = new javax.swing.ButtonGroup();
        try {
            for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (Exception e) {
            // If Nimbus is not available, you can set the GUI to another look and feel.
        }
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        RB1 = new javax.swing.JRadioButton();
        RB2 = new javax.swing.JRadioButton();
        CB1 = new javax.swing.JComboBox();
        searchPath = new javax.swing.JTextField();
        range = new javax.swing.JCheckBox();
        ext = new javax.swing.JCheckBox();
        jLabel2 = new javax.swing.JLabel();
        RB3 = new javax.swing.JRadioButton();
        RB4 = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TB1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        PB1 = new javax.swing.JProgressBar();
        status = new javax.swing.JLabel();
        OP1 = new javax.swing.JOptionPane();
        openFile = new javax.swing.JButton();
        deleteFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Search for duplicate files on Local Machine");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setText("Scan In : ");

        BG1.add(RB1);
        RB1.setText("Drive");
        RB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB1ActionPerformed(evt);
            }
        });

        BG1.add(RB2);
        RB2.setText("Folder");
        RB2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RB2ActionPerformed(evt);
            }
        });

        CB1.setEnabled(false);
        java.io.File f[] = java.io.File.listRoots();
        for(int i=0; i<f.length; i++)
        {
            /*java.io.File f1=new java.io.File(f[i].getPath()+"\\Recycled");
            java.io.File f2=new java.io.File(f[i].getPath()+"\\Recycler");
            if(f1.exists()  || f2.exists())*/
            {
                CB1.addItem(f[i].getPath());
            }
        }

        searchPath.setEditable(false);

        range.setSelected(true);
        range.setText("Files of exact size only");
        range.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        range.setMargin(new java.awt.Insets(0, 0, 0, 0));
        range.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rangeItemStateChanged(evt);
            }
        });
        range.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rangeActionPerformed(evt);
            }
        });

        ext.setSelected(true);
        ext.setText("Files of same extension only");
        ext.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        ext.setMargin(new java.awt.Insets(0, 0, 0, 0));
        ext.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                extItemStateChanged(evt);
            }
        });
        ext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                extActionPerformed(evt);
            }
        });

        jLabel2.setText("Comparision method : ");

        BG2.add(RB3);
        RB3.setSelected(true);
        RB3.setText("MD5");

        BG2.add(RB4);
        RB4.setText("SHA-1");

        TB1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "File", "Location", "Size", "Hash Value", "Delete"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TB1);

        jButton1.setText("List");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        OP1.setEnabled(false);

        openFile.setText("Open Selected");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });

        deleteFile.setText("Delete Selected");
        deleteFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(status, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(RB1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CB1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(RB2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchPath, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(ext)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(range)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(14, 14, 14)
                        .addComponent(RB3)
                        .addGap(18, 18, 18)
                        .addComponent(RB4))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(openFile)
                        .addGap(18, 18, 18)
                        .addComponent(deleteFile))
                    .addComponent(PB1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 302, Short.MAX_VALUE)
                    .addComponent(OP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 302, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(RB1)
                    .addComponent(CB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RB2)
                    .addComponent(searchPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ext)
                    .addComponent(range)
                    .addComponent(RB4)
                    .addComponent(RB3)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(openFile)
                    .addComponent(deleteFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PB1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(0, 173, Short.MAX_VALUE)
                    .addComponent(OP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 173, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB1ActionPerformed
        // TODO add your handling code here:
        CB1.setEnabled(true);
        searchPath.setEnabled(false);
    }//GEN-LAST:event_RB1ActionPerformed

    private void RB2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RB2ActionPerformed
        // TODO add your handling code here:

        
        /*File f;
        try {
            System.out.println(this.getClass().getName() + " is loaded from " + getClass().getProtectionDomain().getCodeSource().getLocation().toURI());
            f = new File(getClass().getProtectionDomain().getCodeSource().getLocation().toURI());
            System.out.println(f.exists());
            JOptionPane.showMessageDialog(this,f.getParent());
        } catch (URISyntaxException ex) {
            Logger.getLogger(DFF.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        
        CB1.setEnabled(false);
        searchPath.setEnabled(true);
        javax.swing.JFrame frame4 = new javax.swing.JFrame();
        FC1 = new javax.swing.JFileChooser();

        FC1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);

       int returnVal1 = FC1.showOpenDialog(frame4);

       frame4.setAlwaysOnTop(true);

       if(returnVal1 == javax.swing.JFileChooser.APPROVE_OPTION )
        {
          searchPath.setText(FC1.getSelectedFile().getPath());
        } 
    }//GEN-LAST:event_RB2ActionPerformed

    private void rangeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rangeItemStateChanged
        // TODO add your handling code here:
        
}//GEN-LAST:event_rangeItemStateChanged

    private void rangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rangeActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_rangeActionPerformed

    private void extItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_extItemStateChanged
        // TODO add your handling code here:
        
    }//GEN-LAST:event_extItemStateChanged

    private void extActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_extActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_extActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        t=new Thread(this,"process");
        t.start();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:
        int rr = TB1.getSelectedRow();
        String fp = (String)TB1.getValueAt(rr,1);
        try {
            if(fp!=null && fp.trim().equalsIgnoreCase("")==false) {
                File tmp=new File(fp);
                //Open File
                Desktop desktop = Desktop.getDesktop();
                desktop.open(tmp);
            }
        } catch (Exception ex) {
            status.setText("Unable to Open File.\n"+ex);
        }
}//GEN-LAST:event_openFileActionPerformed

    private void deleteFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFileActionPerformed
        // TODO add your handling code here:
        int rr = TB1.getSelectedRow();
        String fp = (String)TB1.getValueAt(rr,1);

        try {
            //Permanently deleting file from hard disk and clearing the info from the table.
            File delFile = new File((String) fp);
            delFile.delete();
            TB1.setValueAt("",rr,0);
            TB1.setValueAt("",rr,1);
            TB1.setValueAt("",rr,2);
            TB1.setValueAt("",rr,3);
        } catch (Exception ex) {
            status.setText("Unable to Delete File.\n"+ex);
        }
}//GEN-LAST:event_deleteFileActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        //MainWindow.displayMainWindow();
    }//GEN-LAST:event_formWindowClosed

    public void run() {
        try {
            coldata.removeAllElements();
            filesPath.removeAllElements();
            filesName.removeAllElements();
            filesSize.removeAllElements();
            filesHash.removeAllElements();
            createFileList();
            computeHash();
            compareFiles();
            status.setText("Finished.");
        } catch (Exception e) {e.printStackTrace();
        }
    }

    private void createFileList()
    {
        //System.out.println(searchPath.getText());
        String strSearchPath= RB1.isSelected()?(String)CB1.getSelectedItem():searchPath.getText();
        //System.out.println("-->"+strSearchPath);
        if(strSearchPath==null || (strSearchPath!=null && strSearchPath.trim().equalsIgnoreCase("")))
            OP1.showMessageDialog(null,"Please Select Location First.");
        else
        {
            status.setText("Creating File List...");
            Stack st = new Stack();
            int i;
            try {
                do {
                    i=0;
                    status.setText("Searching Directory \""+strSearchPath+"\" ...");
                    
                    File f=new File(strSearchPath);
                    String ele[] = f.list();
                    while(i<ele.length)
                    {
                        File f1 = new File(strSearchPath+ File.separator + ele[i]);
                        //System.out.println(f1+"~~~"+f1.isFile()+" "+f1.isDirectory()+" "+" "+f1.exists());
                        if(f1.isFile())
                        {
                            filesName.addElement(f1.getName());
                            filesPath.addElement(f1.getPath());
                            filesSize.addElement(f1.length()+"");
                            filesHash.addElement("-");
                            //System.out.println(f1);
                            totalFiles++;
                        }
                        else if(f1.isDirectory())
                        {
                            st.push(f1.getPath());
                        }
                        i++;
                    }
                    strSearchPath = (String) st.pop();
                } while (st!=null);
            } catch (Exception e) {status.setText("Error occured while Creating File List...");}
        }
    }

    private void computeHash() throws NoSuchAlgorithmException, FileNotFoundException
    {
        status.setText("Computing Hash For Files...");
        for (int i=0;i<filesPath.size();i++)
        {
            String fp = (String)filesPath.get(i);

            

            status.setText("Computing Hash For File \""+fp+"\"");
            //System.out.println("@@@@"+(RB3.isSelected()?RB3.getText():RB4.getText()));
            MessageDigest digest = MessageDigest.getInstance(RB3.isSelected()?RB3.getText():RB4.getText());
            File f = new File(fp);
            InputStream is = new FileInputStream(f);
            byte[] buffer = new byte[262144];
            int read = 0;
            try {
                    while( (read = is.read(buffer)) > 0) {
                            digest.update(buffer, 0, read);
                    }
                    byte[] md5sum = digest.digest();
                    BigInteger bigInt = new BigInteger(1, md5sum);
                    filesHash.setElementAt(bigInt.toString(16), i);
                    PB1.setValue(percent(i+1,totalFiles));
                    //System.out.println("totalFiles="+totalFiles);
                    //System.out.println("prv->"+percent(i,totalFiles) );
                    //String output = bigInt.toString(16);
                    //System.out.println("MD5: " + output);
            }
            catch(IOException e) {
                    status.setText("Unable to process file for Hash.");
                    throw new RuntimeException("Unable to process file for Hash", e);
            }
            finally {
                    try {
                            is.close();
                    }
                    catch(IOException e) {
                            status.setText("Unable to close input stream for Hash calculation.");
                            throw new RuntimeException("Unable to close input stream for Hash calculation", e);
                    }
            }
        }
    }

    private int percent(int val,int total)
    {
        double d=(double)val/(double)total;
        //System.out.println("val="+d);
        int tmp= (int)(d*100);
        //System.out.println("tmp="+tmp);
        //System.out.println("tmp/2="+tmp/2);
        return tmp/2;
    }

    private void compareFiles()
    {
        status.setText("Comparing Files...");

        //System.out.println(filesPath.size());

        int totalProcessed=0;

        boolean duplicateFound=false;
        for (int i=0;i<filesPath.size();i++)
        {
            totalProcessed++;
            //System.out.println(i);
            String fn1 = (String)filesName.get(i);
            String fp1 = (String)filesPath.get(i);
            String fs1 = (String)filesSize.get(i);
            String fh1 = (String)filesHash.get(i);

            status.setText("Comparing \""+filesPath.get(i)+"\" with Other Files");

            for (int j = i+1; j < filesName.size(); j++)
            {
                totalProcessed++;
                //System.out.println(j);
                String fn2 = (String)filesName.get(j);
                String fp2 = (String)filesPath.get(j);
                String fs2 = (String)filesSize.get(j);
                String fh2 = (String)filesHash.get(j);
                if(compareExtension(fn1,fn2) && compareSize(fs1, fs2) && fh1.equalsIgnoreCase(fh2))
                {
                    if (duplicateFound==false)  {duplicateFound=true;}

                    rowdata=new Vector();
                    rowdata.addElement(fn2);
                    rowdata.addElement(fp2);
                    rowdata.addElement(fs2);
                    rowdata.addElement(fh2);
                    coldata.addElement(rowdata);

                    filesName.removeElementAt(j);
                    filesPath.removeElementAt(j);
                    filesSize.removeElementAt(j);
                    filesHash.removeElementAt(j);
                    
                    j--;
                }
                PB1.setValue(percent(totalProcessed+1,totalFiles)+50);
                //System.out.println("nxt->"+percent(totalProcessed+1,totalFiles));
            }

            if(duplicateFound)
            {
               rowdata=new Vector();
               rowdata.addElement(fn1);
               rowdata.addElement(fp1);
               rowdata.addElement(fs1);
               rowdata.addElement(fh1);
               coldata.addElement(rowdata);

               rowdata = new Vector();
               rowdata.addElement("");
	       rowdata.addElement("");
               rowdata.addElement("");
               rowdata.addElement("");
	       coldata.addElement(rowdata);

               filesName.removeElementAt(i);
               filesPath.removeElementAt(i);
               filesSize.removeElementAt(i);
               filesHash.removeElementAt(i);
               
               i--;
            }
            DupTable();
            duplicateFound=false;

            PB1.setValue(percent(totalProcessed+1,totalFiles)+50);
            //System.out.println("nxt->"+percent(totalProcessed+1,totalFiles));
            
            //System.out.println(getExtension(fn1));
        }
    }

    private boolean compareSize(String file1Size, String file2Size)
    {
        if(range.isSelected())
        {
            return file1Size.equalsIgnoreCase(file2Size);
        }
        else return true;
    }

    private boolean compareExtension(String file1Name, String file2Name)
    {
        if(ext.isSelected())
        {
            return getExtension(file1Name).equalsIgnoreCase(getExtension(file2Name));
        }
        else return true;
    }

    private String getExtension(String fileName)
    {
        String ret=null;
        if(fileName.lastIndexOf(".")>-1)
        {
            ret=fileName.substring(fileName.lastIndexOf("."));
        }
        return ret;
    }

    public void DupTable()
    {
        Vector dupHead = new Vector();
        dupHead.addElement("File");
        dupHead.addElement("Location");
        dupHead.addElement("Size");
        dupHead.addElement("Hash Value");

        TB1.setModel(new javax.swing.table.DefaultTableModel(coldata,dupHead){
            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return false;}
        });
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DFF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup BG1;
    private javax.swing.ButtonGroup BG2;
    private javax.swing.JComboBox CB1;
    private javax.swing.JOptionPane OP1;
    private javax.swing.JProgressBar PB1;
    private javax.swing.JRadioButton RB1;
    private javax.swing.JRadioButton RB2;
    private javax.swing.JRadioButton RB3;
    private javax.swing.JRadioButton RB4;
    private javax.swing.JTable TB1;
    private javax.swing.JButton deleteFile;
    private javax.swing.JCheckBox ext;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton openFile;
    private javax.swing.JCheckBox range;
    private javax.swing.JTextField searchPath;
    private javax.swing.JLabel status;
    // End of variables declaration//GEN-END:variables

}
